<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config></context:annotation-config>

    <!--Changing the scope of the Bean allows us to create multiple instances of the same class.
     This is the way to make work not as a Singleton Pattern-->
<!--    <bean id = "e" class = "com.model.Employee" scope="prototype">-->

<!--        <constructor-arg value="1234"> </constructor-arg>-->
<!--        <constructor-arg value="Omkar"> </constructor-arg>-->
<!--        <constructor-arg value="omkar@gmail.com"> </constructor-arg>-->
<!--        <constructor-arg value="5000"> </constructor-arg>-->

<!--        &lt;!&ndash; When we are calling both constructor injection method and Getter, Setter Injection method-->
<!--        Setters will always override the values set by the constructor. This happens because Bean works on Singleton-->
<!--        Design pattern which means there can only be one instance of the class-->
<!--        This is also following Reflection API hence even if the Constructor is private it can still create an instance of-->
<!--        the class.&ndash;&gt;-->
<!--        <property name="id" value="101"> </property>-->
<!--        <property name="name" value="Omkar"> </property>-->
<!--        <property name="email" value="omkar@gmail.com"> </property>-->
<!--        <property name="salary" value="5000"> </property>-->
<!--    </bean>-->

    <!--When we have multiple model classes its not possible to create a bean tag each and every one of them
     Instead of the we have a XML annotation to create instances of every model class
     The tag show below will create the instance of every class present under the package mentioned in
     Base-Package -->
    <context:component-scan base-package="com.model"/>

</beans>
